import {
  getCanvasWidth: V2F,
  getCanvasHeight: V2F,
  log: I2V,
  Math_tan: F2F
} from 'env';

type V2F = () => f32;
type I2V = (i32) => void;
type F2F = (f32) => f32;
type F2I = (f32) => i32;

export const memory: Memory<{initial: 16}>; // multiplication of 65536 bytes
const INT_SIZE: i32 = 4;
const VALUES_PER_VERTEX: i32 = 3;
const VALUES_PER_COLOR: i32 = 4;

let MAX_TRIANGLES: i32 = 0;

// shared memory
const SIZE_FUNC_RETURN: i32 = 100;
let SIZE_RENDER_COLOR_BUFFER: i32 = 0;
let SIZE_RENDER_VERTEX_BUFFER: i32 = 0;
let SIZE_RENDER_INDEX_BUFFER: i32 = 0;
let SIZE_RENDER_TEXCOORDS_BUFFER: i32 = 0;
const SIZE_PROJECTION_MATRIX: i32 = 64;//16 * FLOAT_SIZE
const SIZE_VIEW_MATRIX: i32 = 64;//16 * FLOAT_SIZE

let OFFSET_FUNC_RETURN: i32 = 0;
let OFFSET_RENDER_COLOR_BUFFER: i32 = 0;
let OFFSET_RENDER_VERTEX_BUFFER: i32 = 0;
let OFFSET_RENDER_INDEX_BUFFER: i32 = 0;
let OFFSET_RENDER_TEXCOORDS_BUFFER: i32 = 0;
let OFFSET_PROJECTION_MATRIX: i32 = 0;
let OFFSET_VIEW_MATRIX: i32 = 0;

// internal memory
let OFFSET_CURRENT_COLOR: i32 = 0;


const I: f32 = 1.0;
const O: f32 = 0.0;
const PI: f32 = 3.141592653589793;
const PI_180: f32 = 0.017453292519943295;// PI/180.0


const ALL_TEXTURES:i32 = 1;
const TEXTURE_CHECKERBOARD: i32 = 0;


export function preinit(): i32 {
  return SIZE_FUNC_RETURN;
}

function rgba(r: i32, g: i32, b: i32, a: i32): i32 {
  return (a << 24) | (b << 16) | (g << 8) | r;
}
function rgb(r: i32, g: i32, b: i32): i32 {
  return rgba(r, g, b, 255);
}

// call it before init()
export function generateTextures(): void {
  const ret: i32[] = OFFSET_FUNC_RETURN;
  let x: i32 = 0;
  let y: i32 = 0;
  let i: i32 = 0;
  let j: i32 = 0;
  let p: i32 = 0;
  
  let textureStart: i32 = OFFSET_FUNC_RETURN + SIZE_FUNC_RETURN
    + 1 + 3 * ALL_TEXTURES;//make some space for info about textures
  let tex: i32[] = textureStart;
  let textureCount: i32 = 0;

  const w: i32 = 500;
  const h: i32 = 500;
  const gap: i32 = 50;
  let color: i32 = 0;

  // checkerboard: TEXTURE_CHECKERBOARD
  p = 0;
  for (y = 0; y < h; y += gap) {
    for (x = 0; x < w; x += gap) {
      // fill rectangle
      for (i = 0; i < gap; i+=1) {
        for (j = 0; j < gap; j+=1) {
          p = (y+i)*w + x + j;
          if (color == 0) {
            tex[p] = rgb(255, 0, 0);
          }
          else {
            tex[p] = rgb(255, 255, 255);
          }
        }  
      }

      color = (color + 1) % 2;
    }

    // start row with different color than row above
    color = (color + 1) % 2;
  }

  textureCount += 1;

  // return info about all textures
  ret[0] = textureCount;
  ret[1] = w;
  ret[2] = h;
  ret[3] = textureStart;
}


// returns memory layout
export function init(maxTriangles: i32): i32 {
  const ret: i32[] = OFFSET_FUNC_RETURN;

  MAX_TRIANGLES = maxTriangles;
  const COLOR_BYTES_PER_TRIANGLE: i32 = VALUES_PER_COLOR * VALUES_PER_VERTEX * 4;
  const BYTES_PER_VERTEX: i32 = VALUES_PER_VERTEX * 4;
   
  
  SIZE_RENDER_COLOR_BUFFER = MAX_TRIANGLES * COLOR_BYTES_PER_TRIANGLE;
  SIZE_RENDER_VERTEX_BUFFER = MAX_TRIANGLES * BYTES_PER_VERTEX;
  SIZE_RENDER_INDEX_BUFFER = MAX_TRIANGLES * BYTES_PER_VERTEX;//usually, it's less
  SIZE_RENDER_TEXCOORDS_BUFFER = MAX_TRIANGLES * BYTES_PER_VERTEX/2;

  OFFSET_RENDER_COLOR_BUFFER = OFFSET_FUNC_RETURN + SIZE_FUNC_RETURN;
  OFFSET_RENDER_VERTEX_BUFFER = OFFSET_RENDER_COLOR_BUFFER + SIZE_RENDER_COLOR_BUFFER;
  OFFSET_RENDER_INDEX_BUFFER = OFFSET_RENDER_VERTEX_BUFFER + SIZE_RENDER_VERTEX_BUFFER;
  OFFSET_RENDER_TEXCOORDS_BUFFER = OFFSET_RENDER_INDEX_BUFFER + SIZE_RENDER_INDEX_BUFFER;
  OFFSET_PROJECTION_MATRIX = OFFSET_RENDER_TEXCOORDS_BUFFER + SIZE_RENDER_TEXCOORDS_BUFFER;
  OFFSET_VIEW_MATRIX = OFFSET_PROJECTION_MATRIX + SIZE_PROJECTION_MATRIX;
  
  const OFFSET_SHARED_MEMORY_END: i32 = OFFSET_VIEW_MATRIX + SIZE_VIEW_MATRIX;

  // internal memory
  OFFSET_CURRENT_COLOR = OFFSET_SHARED_MEMORY_END;

  ret[0] = VALUES_PER_COLOR;
  ret[1] = VALUES_PER_VERTEX;
  ret[2] = SIZE_RENDER_COLOR_BUFFER;
  ret[3] = SIZE_RENDER_VERTEX_BUFFER;
  ret[4] = SIZE_RENDER_INDEX_BUFFER;
  ret[5] = SIZE_RENDER_TEXCOORDS_BUFFER;
  ret[6] = OFFSET_RENDER_COLOR_BUFFER;
  ret[7] = OFFSET_RENDER_VERTEX_BUFFER;
  ret[8] = OFFSET_RENDER_INDEX_BUFFER;
  ret[9] = OFFSET_RENDER_TEXCOORDS_BUFFER;
  ret[10] = OFFSET_PROJECTION_MATRIX;
  ret[11] = OFFSET_VIEW_MATRIX;
  ret[12] = OFFSET_SHARED_MEMORY_END;

  return SIZE_FUNC_RETURN;
}



function simulate(): void {


}


let vertexCount: i32 = 0;
let indexCount: i32 = 0;


function triangle(
  v1x: f32, v1y: f32, v1z: f32,
  v2x: f32, v2y: f32, v2z: f32,
  v3x: f32, v3y: f32, v3z: f32
): void {
  const vertices: f32[] = OFFSET_RENDER_VERTEX_BUFFER;
  const colors: f32[] = OFFSET_RENDER_COLOR_BUFFER;
  const indices: i32[] = OFFSET_RENDER_INDEX_BUFFER;
  const currentColor: f32[] = OFFSET_CURRENT_COLOR;

  let i: i32 = vertexCount * VALUES_PER_VERTEX;
  vertices[i] = v1x;
  vertices[i+1] = v1y;
  vertices[i+2] = v1z;
  vertices[i+3] = v2x;
  vertices[i+4] = v2y;
  vertices[i+5] = v2z;
  vertices[i+6] = v3x;
  vertices[i+7] = v3y;
  vertices[i+8] = v3z;

  i = vertexCount * VALUES_PER_COLOR;
  let j: i32 = 0;
  for (j = 0; j < 12; j+=1) {
    colors[i + j] = currentColor[j];
  }

  indices[indexCount] = vertexCount;
  indices[indexCount+1] = vertexCount+1;
  indices[indexCount+2] = vertexCount+2;

  vertexCount += 3;
  indexCount += 3;
}

function quad(
  v1x: f32, v1y: f32, v1z: f32, v2x: f32, v2y: f32, v2z: f32,
  v3x: f32, v3y: f32, v3z: f32, v4x: f32, v4y: f32, v4z: f32
): void {
  //1,2,3
  triangle(v1x, v1y, v1z, v2x, v2y, v2z, v3x, v3y, v3z);
  
  //3,4,1
  const vertices: f32[] = OFFSET_RENDER_VERTEX_BUFFER;
  const colors: f32[] = OFFSET_RENDER_COLOR_BUFFER;
  const indices: i32[] = OFFSET_RENDER_INDEX_BUFFER;
  const currentColor: f32[] = OFFSET_CURRENT_COLOR;
  
  let i: i32 = vertexCount * VALUES_PER_VERTEX;
  vertices[i] = v4x;
  vertices[i+1] = v4y;
  vertices[i+2] = v4z;
  
  i = vertexCount * VALUES_PER_COLOR;
  colors[i] = currentColor[12];
  colors[i+1] = currentColor[13];
  colors[i+2] = currentColor[14];
  colors[i+3] = currentColor[15];
  
  indices[indexCount] = vertexCount-1;
  indices[indexCount+1] = vertexCount;
  indices[indexCount+2] = vertexCount-3;

  vertexCount += 1;
  indexCount += 3;
}

// set 3 colors for 3 triangle vertices
function setColors3(alpha: f32, r1: f32, g1: f32, b1: f32, r2: f32, g2: f32, b2: f32, r3: f32, g3: f32, b3: f32): void {
  const color: f32[] = OFFSET_CURRENT_COLOR;

  color[0] = r1;
  color[1] = g1;
  color[2] = b1;
  color[3] = alpha;
  color[4] = r2;
  color[5] = g2;
  color[6] = b2;
  color[7] = alpha;
  color[8] = r3;
  color[9] = g3;
  color[10] = b3;
  color[11] = alpha;
}

function setColors4(alpha: f32,
  r1: f32, g1: f32, b1: f32, r2: f32, g2: f32, b2: f32,
  r3: f32, g3: f32, b3: f32, r4: f32, g4: f32, b4: f32
): void {
  const color: f32[] = OFFSET_CURRENT_COLOR;
  setColors3(alpha, r1, g1, b1, r2, g2, b2, r3, g3, b3);

  color[12] = r4;
  color[13] = g4;
  color[14] = b4;
  color[15] = alpha;
}

// set single color for 3 triangle vertices
function setColor(alpha: f32, r: f32, g: f32, b: f32): void {
  const color: f32[] = OFFSET_CURRENT_COLOR;

  let i: i32 = 0;
  for (i = 0; i < 16; i+=4) {
    color[i] = r;
    color[i+1] = g;
    color[i+2] = b;
    color[i+3] = alpha;
  }
}

function set16f(addr: i32,
    f0: f32, f1: f32, f2: f32, f3: f32,
    f4: f32, f5: f32, f6: f32, f7: f32,
    f8: f32, f9: f32, f10:f32, f11:f32,
    f12:f32, f13:f32, f14:f32, f15:f32
): void {
  const a: f32[] = addr;
  a[0] = f0; a[1] = f1; a[2] = f2; a[3] = f3;
  a[4] = f4; a[5] = f5; a[6] = f6; a[7] = f7;
  a[8] = f8; a[9] = f9; a[10]= f10;a[11]= f11;
  a[12]= f12;a[13]= f13;a[14]= f14;a[15]= f15;
}

function setProjectionMatrix(addr: i32, 
  fieldOfViewInRadians: f32, aspect: f32, near: f32, far: f32
): void {

  const f: f32 = Math_tan(PI * 0.5 - 0.5 * fieldOfViewInRadians);
  const rangeInv: f32 = 1.0 / (near - far);

  set16f(addr,
    f / aspect, O, O, O,
    O, f, O, O,
    O, O, (near + far) * rangeInv, -1.0,
    O, O, near * far * rangeInv * 2.0, O);
}



// returns numbers:
//  - number of vertices (same as number of colors)
//  - number of indices
export function render(): void {
  const ret: i32[] = OFFSET_FUNC_RETURN;
  const width: f32 = getCanvasWidth();
  const height: f32 = getCanvasHeight();
  const w2: f32 = width/2.0;
  const h2: f32 = height/2.0;

  vertexCount = 0;
  indexCount = 0;

  const aspectRatio: f32 = width/height;
  const fieldOfViewInDegrees: f32 = 90.0 * PI_180;
  setProjectionMatrix(OFFSET_PROJECTION_MATRIX, fieldOfViewInDegrees, aspectRatio, 1.0, 2000.0);

  // bottom left point is 0,0; center is width/2,height/2
  const cameraZ: f32 = height/2.0;
  set16f(OFFSET_VIEW_MATRIX,
    1.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0,
    -w2, -h2, -cameraZ, 1.0);

  // background
  const z: f32 = 0;
  setColor(I, O,O,O);

  setColors4(1.0,
    1.0, 0.0, 0.0,
    0.0, 1.0, 0.0,
    0.0, 0.0, 1.0,
    I,0.5,0.0);

  quad(
    O, O, z,
    O, h2, z,
    w2/2.0, h2, z,
    width, O, z
  );
  quad(
    O, O, z,
    O, h2, z,
    w2/2.0, h2, z,
    width, O, z
  );


  setColors3(1.0,
    1.0, 0.0, 0.0,
    0.0, 1.0, 0.0,
    0.0, 0.0, 1.0);

  let i: i32 = 0;
  for (i=0;i<8;i+=1) {
    const m: f32 = i*90;
    triangle(
      w2-m, h2, 0.0,
      w2-m, O, 0.0,
      width-m, O, 0.0);
  }
      
  setColor(0.4, 1.0, 0.0, 0.0);
  triangle(
    -1.0,-1.0, -0.5,
     1.0,-1.0,-1.0,
     1.0, 1.0,-1.0);

    
  ret[0] = vertexCount;
  ret[1] = indexCount;
}
